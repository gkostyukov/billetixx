generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  bills         Bill[]
  payments      Payment[]
  expenses      Expense[]
  creditCards   CreditCard[]
  incomes       Income[]
  debts         Debt[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bill {
  id          String   @id @default(cuid())
  title       String
  amount      Float
  dueDate     DateTime
  status      String   @default("pending") // pending, paid, overdue
  category    String?
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id          String   @id @default(cuid())
  title       String
  amount      Float
  paymentDate DateTime
  method      String   // cash, card, transfer, etc.
  category    String?
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Expense {
  id          String   @id @default(cuid())
  title       String
  amount      Float
  date        DateTime
  category    String
  description String?
  recurring   Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CreditCard {
  id            String   @id @default(cuid())
  name          String
  lastFourDigits String
  creditLimit   Float
  currentBalance Float   @default(0)
  dueDate       Int      // day of month
  bank          String?
  cardType      String?  // visa, mastercard, amex, etc.
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Income {
  id          String   @id @default(cuid())
  title       String
  amount      Float
  date        DateTime
  source      String
  recurring   Boolean  @default(false)
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Debt {
  id            String   @id @default(cuid())
  title         String
  totalAmount   Float
  remainingAmount Float
  interestRate  Float    @default(0)
  minimumPayment Float?
  dueDate       DateTime?
  creditor      String?
  status        String   @default("active") // active, paid
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
